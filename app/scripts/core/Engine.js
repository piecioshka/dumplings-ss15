define([
    'core/App',
    'core/helpers/AssetsLoader'
], function (App, AssetsLoader) {
    'use strict';

    var Engine = {
        cursors: undefined,
        map: undefined,
        world: undefined,

        jumpTimer: 0,
        jumpButton: undefined,

        preload: function () {
            // console.warn('Engine#preload');
            App.game.phaser.load.image('tile-ground', AssetsLoader.IMAGES.GROUND);
            App.game.phaser.load.image('tile-monkey', AssetsLoader.IMAGES.MONKEY);
            App.game.phaser.load.tilemap('map-1', 'assets/maps/map-1.json', null, Phaser.Tilemap.TILED_JSON);
        },

        _setupMap: function () {
            Engine.map = App.game.phaser.add.tilemap('map-1');
            Engine.map.addTilesetImage('tile-ground');

            // Add +1 to tile ID generated by Tiled program.
            Engine.map.setCollision([1, 2, 4]);
        },

        _setupWorld: function () {
            Engine.world = Engine.map.createLayer('Tile Layer 1');
            Engine.world.resizeWorld();
        },

        create: function () {
            // console.warn('Engine#create');
            App.game.phaser.physics.startSystem(Phaser.Physics.ARCADE);
            App.game.phaser.stage.backgroundColor = '#fff';
            App.game.phaser.physics.arcade.gravity.y = 350;

            Engine._setupMap();
            Engine._setupWorld();

            App.game._createPhaserPlayer(App.game.localPlayer);
            this.camera.follow(App.game.localPlayer.phaser);

            Engine.cursors = App.game.phaser.input.keyboard.createCursorKeys();
            Engine.jumpButton = App.game.phaser.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        },

        update: function () {
            var self = this;
            // console.warn('Engine#update');
            var localPlayer = App.game.localPlayer;

            if (!localPlayer.phaser.alive) {
                return;
            }

            // Enable collisions
            App.game.phaser.physics.arcade.collide(localPlayer.phaser, Engine.world, function (sprite, tile) {
                if (tile.index === 4) {
                    self.map.removeTile(tile.x, tile.y);
                }
            }, null, this);

            // How much different between localPlayer and ground.
            localPlayer.phaser.body.velocity.x = 0;

            if (Engine.cursors.left.isDown) {
                localPlayer.phaser.body.velocity.x = -150;
            } else if (Engine.cursors.right.isDown) {
                localPlayer.phaser.body.velocity.x = 150;
            }

            if (Engine.jumpButton.isDown && localPlayer.phaser.body.onFloor() && App.game.phaser.time.now > Engine.jumpTimer) {
                localPlayer.phaser.body.velocity.y = -350;
                Engine.jumpTimer = App.game.phaser.time.now - 50;
            }

            if (localPlayer.firebase.id) {
                App.game.updatePlayer(localPlayer);
            }

            localPlayer.label.x = localPlayer.phaser.x;
            localPlayer.label.y = localPlayer.phaser.y - 10;
        },

        render: function () {
            // console.warn('Engine#render');
            // Show bounding-box of localPlayer.
            // App.game.phaser.debug.body(App.game.localPlayer.phaser);

            // Show technical info about localPlayer.
            // App.game.phaser.debug.bodyInfo(App.game.localPlayer.phaser, 16, 40);
        }
    };

    return Engine;
});
